
&НаСервере
Процедура УстановитьСтатус(КлючЗаписи,Статус,ДопКомментарий = "") Экспорт 
	ТекЗап = РегистрыСведений.ЗапросНаОтсутствие.СоздатьМенеджерЗаписи();
	ТекЗап.Период = КлючЗаписи.Период;
	ТекЗап.Пользователь = КлючЗаписи.Пользователь;
	ТекЗап.ПользовательПодписант = КлючЗаписи.ПользовательПодписант;
	ТекЗап.ВидОтсутствия = КлючЗаписи.ВидОтсутствия;
	ТекЗап.ПериодНачала = КлючЗаписи.ПериодНачала;
	ТекЗап.ПериодОкончания = КлючЗаписи.ПериодОкончания;
	ТекЗап.Прочитать();
	ТекЗап.Статус = ?(Статус = Истина,Перечисления.СтатусыЗаявок.Одобрен,Перечисления.СтатусыЗаявок.Отклонен);
	Если ЗначениеЗаполнено(ДопКомментарий) Тогда 
		ТекЗап.Комментарий = ТекЗап.Комментарий + "
							|"+ДопКомментарий;
	КонецЕсли;
	ТекЗап.Записать(Истина);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеУчетаВремени(КлючЗаписи) Экспорт 
	
	//Если НачалоДня(КлючЗаписи.ПериодНачала) = НачалоДня(КлючЗаписи.ПериодОкончания) Тогда 
	Если КлючЗаписи.ВидОтсутствия = Перечисления.ВидыВремени.ЗарегистрированоПоКарте
		Или КлючЗаписи.ВидОтсутствия = Перечисления.ВидыВремени.УчестьВсеВремяКакРабочее
		Или КлючЗаписи.ВидОтсутствия = Перечисления.ВидыВремени.МестнаяКомандировка
		Или КлючЗаписи.ВидОтсутствия = Перечисления.ВидыВремени.Личное Тогда 
		
		НовЗап = РегистрыСведений.УчетРабочегоВремени.СоздатьМенеджерЗаписи();
		НовЗап.Период = КлючЗаписи.ПериодНачала;
		НовЗап.Пользователь = КлючЗаписи.Пользователь;
		//НовЗап.Офис = ;
		НовЗап.ВидВремени = КлючЗаписи.ВидОтсутствия;
		НовЗап.ВремяОкончания = КлючЗаписи.ПериодОкончания;
		НовЗап.ПользовательПодписант = КлючЗаписи.ПользовательПодписант;
		НовЗап.Записать();
		
	Иначе //если за период
	
		ВремяНачалаРаботы = Константы.НачалоРабочегоДня.Получить();
		ВремяОкончанияРаботы = Константы.КонецРабочегоДня.Получить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
		               |	РегламентированныйПроизводственныйКалендарь.ВидДня
		               |ИЗ
		               |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		               |ГДЕ
		               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
					   |	И РегламентированныйПроизводственныйКалендарь.Домен = &Домен";
		Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(КлючЗаписи.ПериодНачала));
		Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(КлючЗаписи.ПериодОкончания));
		Запрос.УстановитьПараметр("Домен",КлючЗаписи.Пользователь.Домен);
		ТЗ_ВидыДней = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Стр Из ТЗ_ВидыДней Цикл
			
			Если Стр.ВидДня <> Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота
				И Стр.ВидДня <> Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье
				И Стр.ВидДня <> Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда 
			
				НовЗап = РегистрыСведений.УчетРабочегоВремени.СоздатьМенеджерЗаписи();
				НовЗап.Период = НачалоДня(Стр.ДатаКалендаря) + Число(ВремяНачалаРаботы - '00010101');
				НовЗап.Пользователь = КлючЗаписи.Пользователь;
				//НовЗап.Офис = ;
				НовЗап.ВидВремени = КлючЗаписи.ВидОтсутствия;
				НовЗап.ВремяОкончания = НачалоДня(Стр.ДатаКалендаря) + Число(ВремяОкончанияРаботы - '00010101') - ?(Стр.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный,60*60,0);
				НовЗап.ПользовательПодписант = КлючЗаписи.ПользовательПодписант;
				НовЗап.Записать();
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодтвердитьЗаявку(КлючЗаписи) Экспорт
	НачатьТранзакцию();
	Попытка
		УстановитьСтатус(КлючЗаписи,Истина);	
		ОбновитьДанныеУчетаВремени(КлючЗаписи);
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервере
Функция ОтклонитьЗаявку(КлючЗаписи,ПричинаОтказа = "") Экспорт 
	НачатьТранзакцию();
	Попытка
		УстановитьСтатус(КлючЗаписи,Ложь,"ПРИЧИНА ОТКАЗА: "+?(ЗначениеЗаполнено(ПричинаОтказа),ПричинаОтказа,"<не указана>"));
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервере
Функция ОтменитьЗаявку(КлючЗаписи) Экспорт 
	ТекЗап = РегистрыСведений.ЗапросНаОтсутствие.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ТекЗап,КлючЗаписи);
	ТекЗап.Прочитать();
	Если ТекЗап.Выбран() Тогда 
		Если ТекЗап.Статус <> Перечисления.СтатусыЗаявок.Новый Тогда 
			Возврат Ложь;
		Иначе
			Попытка
        		ТекЗап.Удалить();
				Возврат Истина;
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецФункции