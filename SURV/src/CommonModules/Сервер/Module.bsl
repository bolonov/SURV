
Функция ПолучитьВыборкуОфисов(АвтозагрузкаСобытий = Ложь,АвтозагрузкаПользователей = Ложь) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Офисы.Ссылка,
	               |	Офисы.ВерсияДанных,
	               |	Офисы.ПометкаУдаления,
	               |	Офисы.Предопределенный,
	               |	Офисы.Код,
	               |	Офисы.Наименование,
	               |	Офисы.СтрокаПодключенияКБазеДанныхСКУД,
	               |	Офисы.Домен,
	               |	Офисы.АвтозагрузкаДанныхИзСКУД,
				   |	Офисы.АвтозагрузкаДанныхИзAD
	               |ИЗ
	               |	Справочник.Офисы КАК Офисы
	               |ГДЕ
	               |	НЕ Офисы.ПометкаУдаления
				   |	И ВЫБОР
				   |		КОГДА &АвтозагрузкаСобытий = ИСТИНА
				   |			ТОГДА Офисы.АвтозагрузкаДанныхИзСКУД
				   |        ИНАЧЕ ИСТИНА
				   |	КОНЕЦ
				   |	И ВЫБОР
				   |		КОГДА &АвтозагрузкаПользователей = ИСТИНА
				   |			ТОГДА Офисы.АвтозагрузкаДанныхИзAD
				   |        ИНАЧЕ ИСТИНА
				   |	КОНЕЦ
				   |";
	Запрос.УстановитьПараметр("АвтозагрузкаСобытий",АвтозагрузкаСобытий);
	Запрос.УстановитьПараметр("АвтозагрузкаПользователей",АвтозагрузкаПользователей);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПолучитьДвоичноеПредставлениеЧисла(Знач Значение) Экспорт 
	Значение=Число(Значение);
	Если Значение<=0 Тогда
		Результат="0";
	Иначе
		Значение=Цел(Значение);
		Результат="";
		Пока Значение>0 Цикл
			Результат=Строка(Значение%2)+Результат;
			Значение=Цел(Значение/2) ;
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПолучитьТаблицуПользователейИзAD(Офис) Экспорт
	
	//Если Офис = Неопределено Тогда 
	//	Офис = Справочники.Офисы.ПустаяСсылка();
	//КонецЕсли;
	Если Не ЗначениеЗаполнено(Офис) Или Не ЗначениеЗаполнено(Офис.Домен) Тогда 
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	//Подключаемся к LDAP
	СписокПровайдеров = ПолучитьCOMОбъект("ADs:");
	Для Каждого Провайдер Из СписокПровайдеров Цикл
		Если СтрЧислоВхождений(Провайдер.Name,"LDAP:")>0 Тогда
			Пров = Провайдер.Name;
			Флаг =  Истина;
		КонецЕсли;
	КонецЦикла;
	Если Не Флаг Тогда
		Сообщить("Не удалось подключиться к Active Directory по причине: "+ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка	
		RootDSE = ПолучитьCOMОбъект("LDAP://RootDSE");	
		DC = RootDSE.Get("defaultNamingContext");
		
		ИмяДомена = СтрЗаменить(Лев(DC,Найти(DC,",DC=")-1),"DC=","");
		
		Если DC <> "" И ИмяДомена = "" тогда
			ИмяДомена = Прав(DC,СтрДлина(DC)-3);	
		КонецЕсли;		
	Исключение
		Сообщить("Не удалось подключиться к контейнеру доменов по причине: Указанный домен не существует или к нему невозможно подключиться", 
		СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	ПользователиAD = Новый ТаблицаЗначений;
	ПользователиAD.Колонки.Добавить("Загружать",Новый ОписаниеТипов("Булево"));
	ПользователиAD.Колонки.Добавить("Логин",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("Домен",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(2)));
	ПользователиAD.Колонки.Добавить("Статус",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("Заблокирован",Новый ОписаниеТипов("Булево"));
	ПользователиAD.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("Организация",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("Отдел",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("Должность",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("Описание",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("Email",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("Телефон",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("МобильныйТелефон",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("ДомашнийТелефон",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("Адрес",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	ПользователиAD.Колонки.Добавить("GUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(200)));
		
	ФильтрПоГруппеБезопасности = "";
	ФильтрПоСтатусуПользователя = "";
	ФильтрПоОрганизацииПользователя = "";
	
	//Запрашиваем данные пользователей
	Попытка
		ПользователиAD.Очистить();	
		
		Для Ст = 48 по 1103 цикл
			//			Сообщить(" "+Ст+ " - "+Символ(Ст));
			Connection = Новый COMОбъект("ADODB.Connection");
			Connection.Provider = "ADSDSOObject";
			Connection.Open("Active Directory Provider");
			RecordSet = NEW COMObject("ADODB.RecordSet");
			RecordSet.ActiveConnection = Connection;
			RecordSet.CursorType = 3;
			RecordSet.LockType = 2;
			RecordSet.PageSize = 10000;
			strAttributes = "Name,DisplayName,givenName,middleName,distinguishedName,sAMAccountName,title,department,mail,telephoneNumber,mobile,HomePhone,streetAddress,company,UserAccountControl,distinguishedName, objectGUID, memberOf";
			//strAttributes = "*";
			strQuery = "SELECT "+strAttributes+" FROM 'LDAP://" + ИмяДомена + "' WHERE objectCategory='person' and objectClass='user' and name = '"+Символ(Ст)+"*'";
			RecordSet.Open(strQuery);
			Попытка
				Пока Не RecordSet.EOF Цикл
					
					емайл = RecordSet.Fields("mail").value;
					
					Если ЗначениеЗаполнено(емайл) И RecordSet.Fields("userAccountControl").value<>Null Тогда
						//						Ст2=Ст2+1;
						
						GUID = RecordSet.Fields("objectGUID").value;
						GUID = "("+GUID.GetValue(1)+"-"+GUID.GetValue(2)+"-"+GUID.GetValue(3)+"-"+GUID.GetValue(4)+
						"-"+GUID.GetValue(5)+"-"+GUID.GetValue(6)+"-"+GUID.GetValue(7)+"-"+GUID.GetValue(8)+")";
						
						// Объект.ПользователиAD.
						Статус = ПолучитьДвоичноеПредставлениеЧисла(RecordSet.Fields("UserAccountControl").value);
						Статус = Лев("00000000000000000000000000",23 - СтрДлина(Статус))+Статус; 
						ФлагГруппыБезопасности = НЕ ЗначениеЗаполнено(СокрЛП(ФильтрПоГруппеБезопасности));
						
						Заблокирован = (Лев(Прав(Статус,2),1) = "1");
						
						ЗначениеПоля = RecordSet.Fields("distinguishedName").value;	
						НайдВхожд = Найти(ЗначениеПоля,"OU=");
						Если НайдВхожд <> 0 Тогда
							Подразделение = Сред(ЗначениеПоля,НайдВхожд);
						Иначе
							Подразделение = "";
						КонецЕсли;
						
						Если ЗначениеЗаполнено(RecordSet.Fields("memberOf").Value) 
							И ЗначениеЗаполнено(СокрЛП(ФильтрПоГруппеБезопасности)) Тогда
							
							Для Каждого членГруппы ИЗ  RecordSet.Fields("memberOf").Value.Выгрузить() Цикл
								послСимвол = Найти(членГруппы, ",");
								Если Сред(членГруппы, 4, послСимвол - 4) = СокрЛП(ФильтрПоГруппеБезопасности) Тогда
                                	ФлагГруппыБезопасности = Истина;
									Прервать;
								КонецЕсли;	
							КонецЦикла;	
							
						КонецЕсли;	
						
						Если (Найти(ФильтрПоСтатусуПользователя,Статус) = 0 
							И (RecordSet.Fields("company").value = ФильтрПоОрганизацииПользователя или СокрЛП(ФильтрПоОрганизацииПользователя) = "")
							И  ФлагГруппыБезопасности) Тогда							
								НоваяСтрока = ПользователиAD.Добавить();
								НоваяСтрока.Загружать = Истина;
								ИмяПользователя = RecordSet.Fields("DisplayName").value;
								Если ПустаяСтрока(ИмяПользователя) Тогда 
									ИмяПользователя = RecordSet.Fields("Name").value;
								КонецЕсли;
								НоваяСтрока.Имя = ИмяПользователя;
								НоваяСтрока.Логин = RecordSet.Fields("sAMAccountName").value;
								НоваяСтрока.Домен = ?(ЗначениеЗаполнено(Офис.Домен),Офис.Домен,"ru");
								НоваяСтрока.Должность =  RecordSet.Fields("title").value;
								НоваяСтрока.Отдел =  RecordSet.Fields("department").value;
								НоваяСтрока.Email =  емайл;
								НоваяСтрока.Телефон =  RecordSet.Fields("telephoneNumber").value;
								НоваяСтрока.МобильныйТелефон =  RecordSet.Fields("mobile").value; 
								НоваяСтрока.ДомашнийТелефон =  RecordSet.Fields("HomePhone").value; 
								НоваяСтрока.Адрес =  RecordSet.Fields("streetAddress").value;
								НоваяСтрока.Организация =  RecordSet.Fields("company").value;
								НоваяСтрока.Подразделение = Подразделение;
								НоваяСтрока.Статус = Статус;
								НоваяСтрока.Заблокирован = Заблокирован;								
								НоваяСтрока.GUID = GUID;
						КонецЕсли;
						
					КонецЕсли;
					RecordSet.MoveNext();
				КонецЦикла;
				
			Исключение
				
				//strQuery = "SELECT "+strAttributes+" FROM 'LDAP://" + Объект.Домен + "' WHERE objectCategory='person' and objectClass='user' objectGUID > "++" order by objectGUID";
				//Command.CommandText = strQuery; 
				//RecordSet = Command.Execute();
				
			КонецПопытки;
			
			Если Ст = 4 тогда Ст = 32;конецЕсли;
			Если Ст = 32 тогда Ст = 48;конецЕсли;
			//Если Ст = 90 тогда Ст = 97;конецЕсли;
			Если Ст = 91 тогда Ст = 1071;конецЕсли;
			Если Ст = 1080 тогда Ст = 1081;конецЕсли;
			//Если Ст = 122 тогда Ст = 192;конецЕсли;
			
			Connection.Close();
			
		КонецЦикла;		
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат ПользователиAD;
	
КонецФункции

Процедура ЗагрузитьПользователейИзAD() Экспорт 
	ВыборкаОфисов = ПолучитьВыборкуОфисов(,Истина);
	Пока ВыборкаОфисов.Следующий() Цикл 
		ЗагрузитьПользователейОфиса(ВыборкаОфисов.Ссылка);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьПользователейОфиса(Офис,ТаблицаПользователей = Неопределено, РучнойРежим = Ложь) Экспорт 
	
	Если ТаблицаПользователей = Неопределено Тогда 
		ТаблицаПользователей = ПолучитьТаблицуПользователейИзAD(Офис);
	КонецЕсли;
	
	МассивПользИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	ПрефиксДомена = "\\"+Офис.Домен;
	СписокИдПользИБОфиса = Новый СписокЗначений;
	Для Каждого ЭлМас Из МассивПользИБ Цикл 
		Если Лев(ЭлМас.ПользовательОС,СтрДлина(ПрефиксДомена)) = ПрефиксДомена Тогда 
			СписокИдПользИБОфиса.Добавить(ЭлМас.УникальныйИдентификатор,ЭлМас.Имя);
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого СтрокаПольз Из ТаблицаПользователей Цикл 
		
		Если Не СтрокаПольз.Загружать Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПольз.Email) Тогда 
			Продолжить;
		КонецЕсли;
		
		//НайдДефис = Найти(СтрокаПольз.Телефон,"-");
		//Если НайдДефис = 0 Тогда 
		//	ДобНомер = "";
		//Иначе
		//	Добномер = Сред(СтрокаПольз.Телефон,НайдДефис+1);
		//КонецЕсли;		
		ДобНомер = "";
		Если ЗначениеЗаполнено(СтрокаПольз.Телефон) Тогда 
			ДобНомер = Прав(СтрокаПольз.Телефон,3);
		КонецЕсли;
		
		ПользДомена = "\\"+СтрокаПольз.Домен+"\"+СтрокаПольз.Логин;
		
		НайдЭл = НайтиПользователяПоРеквизиту("Email",СтрокаПольз.Email);
				
		Если Не ЗначениеЗаполнено(НайдЭл) Тогда
			НайдЭл = НайтиПользователяПоРеквизиту("Email",СтрЗаменить(СтрокаПольз.Email,".com","."+СтрокаПольз.Домен));
		КонецЕсли;			
		
		Если Не ЗначениеЗаполнено(НайдЭл) Тогда //для случая, если поменялось имя/емайл - дополнительно пробуем найти через пользователя ИБ (по имени в домене)
			Для Каждого ЭлМас Из МассивПользИБ Цикл 
				Если ЭлМас.ПользовательОС = ПользДомена Тогда 
					НайдЭл = НайтиПользователяПоРеквизиту("ПользовательИБ",ЭлМас.УникальныйИдентификатор);
					Прервать;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НайдЭл) Тогда //такого пользователя нет в базе, значит создаем его
			
			//НачатьТранзакцию();
			
			ПользовательИБ = СоздатьПользователяИБ(СтрокаПольз.Имя,Новый Структура("Имя,АутентификацияСтандартная,ПоказыватьВСпискеВыбора,АутентификацияОС,ПользовательОС",
																					СтрокаПольз.Имя,Ложь,Ложь,НЕ СтрокаПольз.Заблокирован,ПользДомена));
													
			//ИмяПольз = ПолучитьЛогинПоEmail(СтрокаПольз.Email);
			ИмяПольз = СтрокаПольз.Имя;
			СоздатьПользователя(ИмяПольз,СтрокаПольз.Email,ПользовательИБ.УникальныйИдентификатор,,ДобНомер);
			
			//ЗафиксироватьТранзакцию();
			
		Иначе //такой пользователь в справочнике уже есть
			
			СтруктураОбновляемыхРеквизитов = Новый Структура;
			
			//Если НайдЭл.Наименование = ПолучитьЛогинПоEmail(НайдЭл.Email) Тогда //позже можно вернуть, если ФИО будут мигрировать из 1С
			Если НайдЭл.Наименование <> СтрокаПольз.Имя Тогда //до этого данные подгрузились из Shelni
				//УстановитьРеквизитОбъекта(НайдЭл,"Наименование",СтрокаПольз.Имя);
				СтруктураОбновляемыхРеквизитов.Вставить("Наименование",СтрокаПольз.Имя);
			КонецЕсли;
			
			Если НайдЭл.Email <> СтрокаПольз.Email Тогда //возможно, если нашли по логину AD в пользователях ИБ
				//УстановитьРеквизитОбъекта(НайдЭл,"Email",СтрокаПольз.Email);
				СтруктураОбновляемыхРеквизитов.Вставить("Email",СтрокаПольз.Email);
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(ДобНомер) И НайдЭл.ТелефонДобавочный <> ДобНомер Тогда 
			//	//УстановитьРеквизитОбъекта(НайдЭл,"ТелефонДобавочный",ДобНомер);
			//	СтруктураОбновляемыхРеквизитов.Вставить("ТелефонДобавочный",ДобНомер);
			//КонецЕсли;
						
			Если Не ЗначениеЗаполнено(НайдЭл.ПользовательИБ) Тогда //если еще нет учетки - создаем её
				ПользовательИБ = СоздатьПользователяИБ(СтрокаПольз.Имя,Новый Структура("Имя,АутентификацияСтандартная,ПоказыватьВСпискеВыбора,АутентификацияОС,ПользовательОС",
																					СтрокаПольз.Имя,Ложь,Ложь,НЕ СтрокаПольз.Заблокирован,ПользДомена));
				//УстановитьРеквизитОбъекта(НайдЭл,"ПользовательИБ",ПользовательИБ.УникальныйИдентификатор);
				СтруктураОбновляемыхРеквизитов.Вставить("ПользовательИБ",ПользовательИБ.УникальныйИдентификатор);
			КонецЕсли;
			
			УстановитьРеквизитыОбъекта(НайдЭл,СтруктураОбновляемыхРеквизитов);
			
			ПользовательИБ = НайтиПользователяИБ(НайдЭл.ПользовательИБ);
			Если Не ПользовательИБ = Неопределено Тогда //иначе ошибка!!
				Если СтрокаПольз.Заблокирован Тогда //проверим не заблокирован ли пользователь
					ЗаблокироватьПользователяИБ(ПользовательИБ);
				КонецЕсли;							
				Если ПользовательИБ.Имя <> СтрокаПольз.Имя Тогда //поменялось имя!
					ПользовательИБ.Имя = СтрокаПольз.Имя;
					ПользовательИБ.Записать();
				КонецЕсли;
			КонецЕсли;
			
			ЭлементИдДляУдаления = СписокИдПользИБОфиса.НайтиПоЗначению(ПользовательИБ.УникальныйИдентификатор);
			Если ЭлементИдДляУдаления <> Неопределено Тогда 
				СписокИдПользИБОфиса.Удалить(ЭлементИдДляУдаления);				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//если в списке что-то осталось - то это удаленные из AD пользователи!
	Если Не РучнойРежим Тогда 
		Для Каждого Эл Из СписокИдПользИБОфиса Цикл 
			ПользовательИБ = НайтиПользователяИБ(Эл.Значение);
			ЗаблокироватьПользователяИБ(ПользовательИБ);
			НайдЭл = НайтиПользователяПоРеквизиту("ПользовательИБ",ПользовательИБ.УникальныйИдентификатор);
			Если ЗначениеЗаполнено(НайдЭл) Тогда 
				//Если Не НайдЭл.ПометкаУдаления Или Не ЗначениеЗаполнено(НайдЭл.ДатаУвольнения) Тогда 
				НайдПольз = НайдЭл.ПолучитьОбъект();
				НайдПольз.ПометкаУдаления = Истина;
				Если Не ЗначениеЗаполнено(НайдПольз.ДатаУвольнения) Тогда 
					НайдПольз.ДатаУвольнения = ТекущаяДата();
					НайдПольз.ТелефонДобавочный = "";
				КонецЕсли;
				НайдПольз.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиПользователяИБ(ИдПользователя) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	НайдПольз = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат НайдПольз;
КонецФункции

Функция НайтиПользователяПоРеквизиту(Реквизит,Значение) Экспорт 
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Пользователи.Ссылка
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |ГДЕ
	                      |	НЕ Пользователи.ПометкаУдаления");
	Запрос.Текст = Запрос.Текст + " И Пользователи."+Реквизит+" = &Значение";
	Запрос.УстановитьПараметр("Значение",Значение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Справочники.Пользователи.ПустаяСсылка();
КонецФункции

Процедура ЗаблокироватьПользователяИБ(Польз)
	Польз.АутентификацияОС          = Ложь;
	Польз.АутентификацияСтандартная = Ложь;
	Польз.ПоказыватьВСпискеВыбора   = Ложь;
	Польз.Записать();	
КонецПроцедуры

Функция УстановитьРеквизитОбъекта(Ссылка,Реквизит,Значение)
	Попытка
		Об = Ссылка.ПолучитьОбъект();
		Об[Реквизит] = Значение;
		Об.Записать();
		Возврат Истина;
	Исключение	
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция УстановитьРеквизитыОбъекта(Ссылка,СтруктураРеквизитов)
	Если СтруктураРеквизитов.Количество() > 0 Тогда 
		Попытка
			Об = Ссылка.ПолучитьОбъект();
			Для Каждого Эл Из СтруктураРеквизитов Цикл 
				Об[Эл.Ключ] = Эл.Значение;
			КонецЦикла;
			Об.Записать();
			Возврат Истина;
		Исключение	
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция СоздатьПользователяИБ(Имя,СтруктураПолей,Искать = Истина) Экспорт 
	Если Искать Тогда 
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);
		Если ПользовательИБ = Неопределено И СтруктураПолей.Свойство("ПользовательОС") Тогда //попробуем найти по имени в домене
			МасПользИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
			Для Каждого ЭлМас Из МасПользИБ Цикл 
				Если ЭлМас.ПользовательОС = СтруктураПолей.ПользовательОС Тогда 
					ПользовательИБ = ЭлМас;
					//теоретически здесь надо проверять не осталась ли у кого-то эл-та справ-ка Пользователи такая же ссылка, но вроде этой ситуации уже не может быть, т.к. эл-т справочника должен также перезаписаться!
					Прервать;					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли
	КонецЕсли;
	Если Не Искать Или ПользовательИБ = Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();	
	КонецЕсли;
	Для Каждого Эл Из СтруктураПолей Цикл 
		ПользовательИБ[Эл.Ключ] = Эл.Значение;		
	КонецЦикла;
	ПользовательИБ.Роли.Очистить();
	ПользовательИБ.Роли.Добавить(Метаданные.Роли.Пользователь);
	ПользовательИБ.Записать();
	Возврат ПользовательИБ;	
КонецФункции

Функция СоздатьПользователя(Имя,Email = "",ПользИБ = "",ФИО = "",ТелДоб = "") Экспорт 
	НовПользователь = Справочники.Пользователи.СоздатьЭлемент();
	НовПользователь.Наименование = Имя;
	Если ЗначениеЗаполнено(Email) Тогда 
		НовПользователь.Email = Email;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПользИБ) Тогда 
		НовПользователь.ПользовательИБ = ПользИБ;
	КонецЕсли;
	//Если ЗначениеЗаполнено(ФИО) Тогда 
	//	НовПользователь.ФИО = ФИО;
	//КонецЕсли;
	Если ЗначениеЗаполнено(ТелДоб) Тогда 
		НовПользователь.ТелефонДобавочный = ТелДоб;
	КонецЕсли;
	НовПользователь.Записать();
	Возврат НовПользователь.Ссылка;
КонецФункции

Функция ВыполнитьЗапросКВнешнемуИсточникуДанных(Запрос,Офис) Экспорт 
	
	ПараметрыСоединения = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//Если СтрокаПодключения = "" Тогда 
	//	//СтрокаПодключения = "driver={Firebird/InterBase(r) driver};uid=SYSDBA;pwd=temp;database=10.140.16.43:C:\Program Files\Shelni\SheltPro\Shieldpro.gdb;client=c:\Program Files (x86)\Firebird\Firebird_1_5\bin\fbclient.dll;";
	//	СтрокаПодключения = "driver={Firebird/InterBase(r) driver};uid=SYSDBA;pwd=temp;database=10.140.16.43:C:\Program Files\Shelni\SheltPro\Shieldpro.gdb;client=\\rumow0063\Firebird\bin\fbclient.dll;";
	//КонецЕсли;
	ПараметрыСоединения.СтрокаСоединения = Офис.СтрокаПодключенияКБазеДанныхСКУД;
	
	Если Офис.ТипБД = Перечисления.ТипыБД.ГолденГэйт Тогда 
		
		ВнешнийИсточник = ВнешниеИсточникиДанных["ГолденГэйт"];
		
	Иначе
	
		ВнешнийИсточник = ВнешниеИсточникиДанных["Шелни"];
		
		ПараметрыСоединения.АутентификацияСтандартная = Истина;
		ПараметрыСоединения.ИмяПользователя = Офис.Логин;//"SYSDBA";
		ПараметрыСоединения.Пароль = Офис.Пароль;//"temp";
		
		ПараметрыСоединения.СтрокаСоединения = СтрЗаменить(ПараметрыСоединения.СтрокаСоединения,"%login%",Офис.Логин);
		ПараметрыСоединения.СтрокаСоединения = СтрЗаменить(ПараметрыСоединения.СтрокаСоединения,"%password%",Офис.Пароль);
		
	КонецЕсли;
		
	ВнешнийИсточник.УстановитьПараметрыСоединенияПользователя(ПользователиИнформационнойБазы.ТекущийПользователь().Имя, ПараметрыСоединения);
	
	Рез = Запрос.Выполнить();
	
	ВнешнийИсточник.РазорватьСоединение();
	
	Возврат Рез;
	
КонецФункции

Процедура ЗагрузитьСобытияИзСКУД() Экспорт 
	СтруктураПараметров = Новый Структура("ДатаНачала,ДатаОкончания");
	ВыборкаОфисов = ПолучитьВыборкуОфисов(Истина);
	Пока ВыборкаОфисов.Следующий() Цикл
		Офис = ВыборкаОфисов.Ссылка;
		СтруктураПараметров.ДатаНачала = ТекущаяДата() + Офис.ОтклонениеВремениВЧасах*60*60 - Константы.ПериодСчитыванияДанныхИзСКУД.Получить()*60;
		СтруктураПараметров.ДатаОкончания = ТекущаяДата() + Офис.ОтклонениеВремениВЧасах*60*60;
		ТаблицаСобытий = ПолучитьТаблицуСобытийИзСКУД(Офис,СтруктураПараметров);
		Если ТаблицаСобытий <> Неопределено Тогда 
			ЗагрузитьСобытияВРегистр(ТаблицаСобытий);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьТаблицуСобытийИзСКУД(Офис, СтруктураПараметров = Неопределено) Экспорт
	
	//Если Офис = Неопределено Тогда 
	//	Офис = Справочники.Офисы.ПустаяСсылка();
	//КонецЕсли;
	Если Не ЗначениеЗаполнено(Офис) Тогда 
		Возврат Неопределено; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если Офис.ТипБД = Перечисления.ТипыБД.ГолденГэйт Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ВЫБОР КОГДА тСобытия.Msg = 49 ТОГДА ""Вход"" ИНАЧЕ ""Выход"" КОНЕЦ КАК Событие,
		               |	тСобытия.Device*100+тСобытия.Msg КАК Считыватель,
		               |	тСобытия.Device КАК Дверь,
		               |	тСобытия.DateTime КАК Период,
		               |	тСобытия.CardCode КАК Карта,
		               |	тСобытия.CardHolderName КАК Фамилия,
		               |	"""" КАК Имя,
		               |	"""" КАК Отчество
		               |ИЗ
		               |	ВнешнийИсточникДанных.ГолденГэйт.Таблица.dbo_View_SURV КАК тСобытия
		               |ГДЕ
					   |	НЕ тСобытия.CardHolderName ЕСТЬ NULL %%ДопУсловие%%
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период";
					   
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	тТипыСобытий.NAME КАК Событие,
		               |	тСобытия.ID_DEV КАК Считыватель,
		               |	тУстройства.NAME КАК Дверь,
		               |	тСобытия.DATETIME КАК Период,
		               |	тСобытия.ID_CARD КАК Карта,
		               |	тСотрудники.SURNAME КАК Фамилия,
		               |	тСотрудники.NAME КАК Имя,
		               |	тСотрудники.PATRONYMIC КАК Отчество
		               |ИЗ
		               |	ВнешнийИсточникДанных.Шелни.Таблица.EVENTS КАК тСобытия
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Шелни.Таблица.CARD КАК тКарточки
		               |		ПО (тКарточки.ID_CARD = тСобытия.ID_CARD)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Шелни.Таблица.PEOPLE КАК тСотрудники
		               |		ПО (тСотрудники.ID_PEP = тКарточки.ID_PEP)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Шелни.Таблица.EVENTTYPE КАК тТипыСобытий
		               |		ПО тСобытия.ID_EVENTTYPE = тТипыСобытий.ID_EVENTTYPE
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Шелни.Таблица.DEVICE КАК тУстройства
		               |		ПО тСобытия.ID_DEV = тУстройства.ID_DEV
					   |ГДЕ
					   |	НЕ тСотрудники.SURNAME ЕСТЬ NULL %%ДопУсловие%%
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период";
		
	КонецЕсли;
	
	ТекстДопУловия = "";
	Если СтруктураПараметров <> Неопределено Тогда 
		Для Каждого Эл Из СтруктураПараметров Цикл 
			Если Эл.Ключ = "ДатаНачала" Тогда 
				ДопУсловие = "И тСобытия.DATETIME >= &ДатаНачала";
			ИначеЕсли Эл.Ключ = "ДатаОкончания" Тогда 
				ДопУсловие = "И тСобытия.DATETIME <= &ДатаОкончания";
			ИначеЕсли Эл.Ключ = "Почта" Тогда 
				Если Офис.ТипБД = Перечисления.ТипыБД.ГолденГэйт Тогда 
					ДопУсловие = "И тСобытия.CardHolderName В (&Почта,&Почта2)";
				Иначе 
					ДопУсловие = "И тСотрудники.SURNAME В (&Почта,&Почта2)";
				КонецЕсли;
				Запрос.УстановитьПараметр("Почта2",ПолучитьЭлектронныйАдресCom(Эл.Значение));
			КонецЕсли;
			ТекстДопУловия = ТекстДопУловия + "
							|	" + ДопУсловие;
			Запрос.УстановитьПараметр(Эл.Ключ,Эл.Значение);
		КонецЦикла;
	КонецЕсли;
	//Если Офис.СчитывателиВхода.Количество() > 0 Или Офис.СчитывателиВыхода.Количество() > 0 Тогда 
	//	МассивКодов = Новый Массив;
	//	Офис.ДвериВхода.ВыгрузитьКолонку( 
	//	ТекстЗапроса = ТекстЗапроса + "
	//						|	" + ДопУсловие;
	//	Запрос.УстановитьПараметр(Эл.Ключ,Эл.Значение);
	//КонецЕсли;		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%%ДопУсловие%%",ТекстДопУловия);
		
	Запрос.Текст = ТекстЗапроса;
	
	Попытка
		Рез = ВыполнитьЗапросКВнешнемуИсточникуДанных(Запрос,Офис);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ТЗ = Рез.Выгрузить();	
	
	ТЗ.Колонки.Добавить("Офис",Новый ОписаниеТипов("СправочникСсылка.Офисы")); 
	ТЗ.Колонки.Добавить("Пользователь",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	Для Каждого СтрокаТЗ Из ТЗ Цикл 
		НайдПольз = Справочники.Пользователи.ПустаяСсылка();
		СтрокаТЗ.Офис = Офис;
		Емайл = НРег(СокрЛП(СтрокаТЗ.Фамилия));
		Логин = ПолучитьЛогинПоEmail(Емайл);
		Если Логин <> Ложь Тогда //это реальный е-майл и логин из него
		    ИмяПользователя = Логин;
			НайдПольз = НайтиПользователяПоРеквизиту("Email",Емайл);
			Если НайдПольз.Пустая() И Прав(Емайл,4) <> ".com" Тогда 
				НайдПольз = НайтиПользователяПоРеквизиту("Email",ПолучитьЭлектронныйАдресCom(Емайл));
			КонецЕсли;
		КонецЕсли;
		Если Логин = Ложь Или НайдПольз.Пустая() Тогда //не успели проставить е-майл вместо имени, либо не нашли по полю е-майл
			Если Логин = Ложь Тогда 
				ИмяПользователя = СокрЛП(СтрокаТЗ.Фамилия+" "+СтрокаТЗ.Имя+" "+СтрокаТЗ.Отчество);
			КонецЕсли;
			НайдПольз = Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя);	
			Если НайдПольз.Пустая() Тогда 
				НайдПольз = СоздатьПользователя(ИмяПользователя,Емайл);
			КонецЕсли;
		КонецЕсли;
		Если Не НайдПольз.Пустая() Тогда
			СтрокаТЗ.Пользователь = НайдПольз;			
		КонецЕсли;		
	КонецЦикла;
	 
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьЭлектронныйАдресCom(Емайл) Экспорт 
	Если Прав(Емайл,4) = ".com" Тогда 
		Возврат Емайл;
	Иначе
		поз = Найти(Емайл,"@miele");
		Если поз <> 0 Тогда 
			НачалоАдреса = Лев(Емайл,поз-1);
			Возврат НачалоАдреса+"@miele.com";
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция ПолучитьПоследнееСобытиеПользователя(Период,Пользователь,ВидВремени = Неопределено) Экспорт 
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	УчетРабочегоВремениСрезПоследних.Период,
	                      |	УчетРабочегоВремениСрезПоследних.Пользователь,
	                      |	УчетРабочегоВремениСрезПоследних.ВидВремени,
	                      |	УчетРабочегоВремениСрезПоследних.ВремяОкончания,
	                      |	УчетРабочегоВремениСрезПоследних.Офис,
	                      |	УчетРабочегоВремениСрезПоследних.ПользовательПодписант,
	                      |	УчетРабочегоВремениСрезПоследних.Дверь,
	                      |	УчетРабочегоВремениСрезПоследних.Комментарий
	                      |ИЗ
	                      |	РегистрСведений.УчетРабочегоВремени.СрезПоследних(
	                      |			&Период,
	                      |			Пользователь = &Пользователь
	                      |				И &ВидВремени В (ВидВремени, НЕОПРЕДЕЛЕНО)) КАК УчетРабочегоВремениСрезПоследних");
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	Запрос.УстановитьПараметр("ВидВремени",ВидВремени);
	Возврат Запрос.Выполнить().Выгрузить();		
КонецФункции

Процедура ЗагрузитьСобытияВРегистр(ТаблицаСобытий,РежимОтладки = Ложь) Экспорт 	
	Для Каждого СтрокаСобытия Из ТаблицаСобытий Цикл 
		Запись = РегистрыСведений.УчетРабочегоВремени.СоздатьМенеджерЗаписи();
		ЭтоВход = СтрокаСобытия.Офис.СчитывателиВхода.Найти(СтрокаСобытия.Считыватель);
		ЭтоВыход = СтрокаСобытия.Офис.СчитывателиВыхода.Найти(СтрокаСобытия.Считыватель);
		Если ЭтоВход <> Неопределено Тогда //это вход
			ЗаполнитьЗначенияСвойств(Запись,СтрокаСобытия);
			Запись.ВидВремени = Перечисления.ВидыВремени.ЗарегистрированоПоКарте;
			Запись.Дверь = ЭтоВход.ОписаниеДвери;
			//Если ЗначениеЗаполнено(ПогрешностьРегистрацииДатчика) Тогда //обработаем равенство/погрешность времени события
			//	ТЗ = ПолучитьПоследнееСобытиеПользователя(СтрокаСобытия.Период,СтрокаСобытия.Пользователь,Перечисления.ВидыВремени.ЗарегистрированоПоКарте);	
			//	Если ТЗ.Количество() > 0 Тогда //нашли запись о последнем входе
			//		ПослЗап = ТЗ.Получить(ТЗ.Количество()-1);
			//		Если НЕ ЗначениеЗаполнено(ПослЗап.ВремяОкончания) Тогда //т.е. был просто вход
			//			Если СтрокаСобытия.Период >= ПослЗап.Период
			//				И СтрокаСобытия.Период - ПослЗап.Период <= ПогрешностьРегистрацииДатчика Тогда 
			//				Продолжить;//зафиксирован вход, совпадающий с последним входом - скорее всего это двойное считываение, пропускаем!
			//			КонецЕсли;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;
			ЗаписатьСобытие(Запись,РежимОтладки);
		ИначеЕсли ЭтоВыход <> Неопределено Тогда //это выход
			ГраницаПериода = Новый Граница(СтрокаСобытия.Период,ВидГраницы.Включая);
			ТЗ = ПолучитьПоследнееСобытиеПользователя(ГраницаПериода,СтрокаСобытия.Пользователь,Перечисления.ВидыВремени.ЗарегистрированоПоКарте);
			ТекстОшибки = "";
			Если ТЗ.Количество() > 0 Тогда //нашли запись о последнем входе
				ПослЗап = ТЗ.Получить(ТЗ.Количество()-1);
				Если НачалоДня(ПослЗап.Период) <> НачалоДня(СтрокаСобытия.Период) Тогда 
					ТекстОшибки = "ОШИБКА - Выход без входа (текущей датой не было ни одного входа)!";
				ИначеЕсли ЗначениеЗаполнено(ПослЗап.ВремяОкончания) Тогда
					Если ПослЗап.ВремяОкончания = СтрокаСобытия.Период Тогда 
					//Если СтрокаСобытия.Период >= ПослЗап.ВремяОкончания
					//	И СтрокаСобытия.Период - ПослЗап.ВремяОкончания <= ПогрешностьРегистрацииДатчика Тогда //обработаем равенство/погрешность времени события
						Продолжить;//зафиксирован выход, совпадающий с последним выходом - скорее всего это двойное считываение, пропускаем!
					Иначе
						ТекстОшибки = "ОШИБКА - Повторный выход (не найден ранее сделанный вход)!";
					КонецЕсли;
				КонецЕсли;				
			Иначе //пишем повторный выход по этой же дате!
				ТекстОшибки = "ОШИБКА - Выход без входа (не найден ни один ранее сделанный вход)!";
			КонецЕсли;
			Если ТекстОшибки = "" Тогда 
				ЗаполнитьЗначенияСвойств(Запись,ПослЗап);
				Запись.ВремяОкончания = СтрокаСобытия.Период;
				Запись.Дверь = ?(ЗначениеЗаполнено(Запись.Дверь),Запись.Дверь + "/","") + ЭтоВыход.ОписаниеДвери;
				ЗаписатьСобытие(Запись,РежимОтладки);
			Иначе
				ЗаполнитьЗначенияСвойств(Запись,СтрокаСобытия);
				Запись.ВидВремени = Перечисления.ВидыВремени.ЗарегистрированоПоКарте;
				Запись.ВремяОкончания = СтрокаСобытия.Период;
				Запись.Дверь = ЭтоВыход.ОписаниеДвери;
				Запись.Комментарий = ТекстОшибки; 
				ЗаписатьСобытие(Запись,РежимОтладки);
			КонецЕсли;
		Иначе //ненужная нам дверь
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаписатьСобытие(Запись,РежимОтладки = Ложь)
	
	КопияЗапись = РегистрыСведений.УчетРабочегоВремени.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(КопияЗапись,Запись);
	КопияЗапись.Прочитать();
	
	ЭтоНоваяЗапись = Не КопияЗапись.Выбран();
	
	Если ЭтоНоваяЗапись
		Или (Не ЭтоНоваяЗапись
			И (КопияЗапись.Период <> Запись.Период
				Или КопияЗапись.Пользователь <> Запись.Пользователь
				Или	КопияЗапись.ВидВремени <> Запись.ВидВремени
				Или КопияЗапись.ВремяОкончания <> Запись.ВремяОкончания
				Или КопияЗапись.Офис <> Запись.Офис
				Или КопияЗапись.ПользовательПодписант <> Запись.ПользовательПодписант)) Тогда 
		Запись.Записать(Истина);
	КонецЕсли;
	
	Если Не ЭтоНоваяЗапись Тогда 
		Если ЗначениеЗаполнено(Запись.ВремяОкончания) И Не ЗначениеЗаполнено(КопияЗапись.ВремяОкончания) Тогда //записываем выход к записи входа!
			ЭтоНоваяЗапись = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не РежимОтладки                                       
		И ЭтоНоваяЗапись                                       //отправляем уведомления только для новых записей
		И НачалоДня(Запись.Период) = НачалоДня(ТекущаяДата()) //и только за сегодня!
		И Запись.ВидВремени = Перечисления.ВидыВремени.ЗарегистрированоПоКарте Тогда
			
	    ЭтоВход = Не ЗначениеЗаполнено(Запись.ВремяОкончания);
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ОтслеживаниеСотрудников.*
		                      |ИЗ
		                      |	РегистрСведений.ОтслеживаниеСотрудников КАК ОтслеживаниеСотрудников
		                      |ГДЕ
		                      |	ОтслеживаниеСотрудников.ПользовательОтслеживания = &ПользовательОтслеживания
		                      |	И ВЫБОР
							  |		КОГДА &ЭтоВход = ИСТИНА ТОГДА ОтслеживаниеСотрудников.НаВход
							  |		ИНАЧЕ ОтслеживаниеСотрудников.НаВыход
							  |	КОНЕЦ");
		Запрос.УстановитьПараметр("ПользовательОтслеживания",Запись.Пользователь);
		Запрос.УстановитьПараметр("ЭтоВход",ЭтоВход);
		
		ТаблицаОповещаемых = Запрос.Выполнить().Выгрузить();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого СтрокаТабл Из ТаблицаОповещаемых Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабл.Пользователь.Email) Тогда
				
				ВходВыход = ?(ЭтоВход,"ВХОД","ВЫХОД");
			
				Тема = "СУРВ: " + ВходВыход + " сотрудника " + Запись.Пользователь;
				
				Текст = "Для сотрудника " + Запись.Пользователь + " зарегистрировано событие " + ВходВыход + " (" + Запись.Офис + ": " + Запись.Дверь + ")";
				
				ОтправитьПисьмоФоново(СтрокаТабл.Пользователь.Email,Тема,Текст);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруКонстант() Экспорт 
	
	СтруктураКонстант = Новый Структура;
	
	Для Каждого Конст Из Метаданные.Константы Цикл 
		СтруктураКонстант.Вставить(Конст.Имя,Константы[Конст.Имя].Получить());
	КонецЦикла;
	
	Возврат СтруктураКонстант;
	
КонецФункции

Функция ПолучитьИнтернетПочтовыйПрофиль() Экспорт
	
	УчетнаяЗапись = ПолучитьСтруктуруКонстант();

	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	Профиль.АдресСервераPOP3 = УчетнаяЗапись.СерверPOP3;
	Профиль.АдресСервераSMTP = УчетнаяЗапись.СерверSMTP;
	Если УчетнаяЗапись.ВремяОжиданияСервера > 0 Тогда
		Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжиданияСервера;
	КонецЕсли; 
	Профиль.Пароль           = УчетнаяЗапись.ПарольPOP3;
	Профиль.Пользователь     = УчетнаяЗапись.ЛогинPOP3;
	Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
	Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
	
	Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		Профиль.ПарольSMTP         = УчетнаяЗапись.ПарольSMTP;
		Профиль.ПользовательSMTP   = УчетнаяЗапись.ЛогинSMTP;
	Иначе
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		Профиль.ПарольSMTP         = "";
		Профиль.ПользовательSMTP   = "";
	КонецЕсли; 
	
	Возврат Профиль;

КонецФункции

Процедура ОтправитьПисьмо(АдресПолучателя,Тема = "",ТекстСообщения = "",НавСсылкаИБ = "") Экспорт
	
	Если Не Константы.ОтправлятьУведомленияПоПочте.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Профиль = ПолучитьИнтернетПочтовыйПрофиль();
	Профиль.POP3ПередSMTP = Константы.POP3ПередSMTP.Получить();

	ИнтернетПочта = Новый ИнтернетПочта;

	Сообщение = Новый ИнтернетПочтовоеСообщение;
	Сообщение.ИмяОтправителя = Константы.АдресЭлектроннойПочты.Получить();
 	Сообщение.Тема = Тема;
    Сообщение.Отправитель = Константы.АдресЭлектроннойПочты.Получить();
    Сообщение.Получатели.Добавить(АдресПолучателя);
	
	//Если ЗначениеЗаполнено(НавСсылкаИБ) Тогда //пока некогда копать в чем здесь проблема..
	//	ТекстСообщения = "<p>"+ТекстСообщения+"</p><p><a href="+НавСсылкаИБ+">Открыть СУРВ</a></p>";
	//Иначе
		ТекстСообщения = "<p>"+ТекстСообщения+"</p><p><a href=""http://rumosaw05.ru.miele.net/SURV/ru_RU/"">Открыть СУРВ</a></p>";
	//КонецЕсли;
	
	ТекстПисьма = Сообщение.Тексты.Добавить();
	ТекстПисьма.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	ТекстПисьма.Текст = ТекстСообщения;   

	Попытка
	   ИнтернетПочта.Подключиться(Профиль);
	   ИнтернетПочта.Послать(Сообщение);
	Исключение
	   Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

Процедура ОтправитьПисьмоФоново(АдресПолучателя,Тема = "",ТекстСообщения = "") Экспорт	
	м = Новый Массив;
	м.Добавить(АдресПолучателя);
	м.Добавить(Тема);
	м.Добавить(ТекстСообщения);	
	м.Добавить(ПолучитьНавигационнуюСсылкуИБ());
	Попытка
		ФоновыеЗадания.Выполнить("Сервер.ОтправитьПисьмо", м, Строка(Новый УникальныйИдентификатор));
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
КонецПроцедуры

Функция ПолучитьНавигационнуюСсылкуИБ() Экспорт 
	Возврат ПараметрыСеанса.НавигационнаяСсылкаИБ;
КонецФункции

Функция ПолучитьТекущегоПользователя(ИзПараметраСеанса = Истина) Экспорт 
	Если ИзПараметраСеанса Тогда 
		Возврат ПараметрыСеанса.ТекущийПользователь;
	Иначе
		ТекПользИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		Возврат НайтиПользователяПоРеквизиту("ПользовательИБ",ТекПользИБ.УникальныйИдентификатор);	
	КонецЕсли;
КонецФункции

Функция ПолучитьЛогинПоEmail(Емайл) Экспорт 
	поз = Найти(Емайл,"@");
	Если поз = 0 Тогда 
		Возврат Ложь;
	Иначе
		Возврат Лев(Емайл,поз-1);
	КонецЕсли;
КонецФункции

Процедура ЗагрузитьПроизводственныйКалендарь(Параметры,НаДату = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(НаДату) Тогда 
		НаДату = ТекущаяДата();
	КонецЕсли;
	
	//подключение через web-сервис:
	
	//Попытка
	//	//Определения = Новый WSОпределения("http://s.arancom.ru/IT/ws/zakaz.1cws?wsdl", полз, парл);
	//	Определения = Новый WSОпределения("http://rumos05/mo_82_tst2/ws/surv.1cws?wsdl", "СУРВ", "123456");
	//	//Прокси = Новый WSПрокси(Определения, "http://miele.ru/delivery", "Miele_Delivery", "Miele_DeliverySoap");
	//	Прокси = Новый WSПрокси(Определения, "http://miele_surv", "Miele_SURV", "Miele_SURVSoap");
	//	Прокси.Пользователь = "СУРВ";//Пользователь
	//	Прокси.Пароль = "123456";//Пароль		
	//Исключение
	//	Прокси = Неопределено;
	//	//СообщениеОбОшибке(ОписаниеОшибки(), "Ошибка связи");
	//	ВызватьИсключение "Ошибка связи: "+ОписаниеОшибки();
	//	Возврат;
	//КонецПопытки;
	//
	//ПроизводственныйКалендарь = Прокси.ВернутьПроизводственныйКалендарь(НаДату);
	//
	//НабЗап = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
	//
	//Для Каждого Эл Из ПроизводственныйКалендарь Цикл 
	//	НовЗап = НабЗап.Добавить();
	//	ЗаполнитьЗначенияСвойств(НовЗап,Эл,,"ВидДня");
	//	НовЗап.Год = Год(НовЗап.ДатаКалендаря);
	//	НовЗап.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Получить(Эл.ВидДня);
	//КонецЦикла;
	//
	//НабЗап.Записать(Истина);
	
	////////////////////////////////////////////////////////////////////////
	
	//подключение через COM:
	
	V83COMConnector = Новый COMОбъект("V83.COMConnector");
	Попытка
		Соединение = V83COMConnector.Connect(Параметры);
	Исключение
		ВызватьИсключение "Ошибка подключени: "+ОписаниеОшибки();
	КонецПопытки;
	
	НабЗап = Соединение.РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
	НабЗап.Отбор.Год.Установить(Год(НаДату));
	НабЗап.Прочитать();
	
	ВидыДней = Соединение.Перечисления.ВидыДнейПроизводственногоКалендаря;
	Домен = НРег(Соединение.Миле_Локализация.ПолучитьКодСтраныКонфигурации());
	
	Для Каждого Зап Из НабЗап Цикл 
		НашаЗап = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НашаЗап,Зап);
		Инд = ВидыДней.Индекс(Зап.ВидДня);
		НашаЗап.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Получить(Инд);
		НашаЗап.Домен = Домен;
		НашаЗап.Записать(Истина);
	КонецЦикла;
	
	Соединение = Неопределено;
	
КонецПроцедуры

Функция ПолучитьСписокТиповБД() Экспорт 
	Список = Новый СписокЗначений;
	Список.Добавить(0,"Шелни");
	Список.Добавить(1,"ГолденГэйт");
	Возврат Список;
КонецФункции

Функция ЕстьПрава(НаименованиеПрав) Экспорт 
	Если РольДоступна(НаименованиеПрав) Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

Функция ПолучитьКлючЗаписи(СтруктураКлюча) Экспорт 
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(СтруктураКлюча);    
	Возврат Новый("РегистрСведенийКлючЗаписи.ЗапросНаОтсутствие", МассивПараметров);
КонецФункции

Функция ПодтвердитьЗаявку(КлючСтруктуры) Экспорт
	КлючЗаписи = ПолучитьКлючЗаписи(КлючСтруктуры);
	Возврат РегистрыСведений.ЗапросНаОтсутствие.ПодтвердитьЗаявку(КлючЗаписи);
КонецФункции

Функция ОтклонитьЗаявку(КлючСтруктуры, ПричинаОтказа = "") Экспорт
	КлючЗаписи = ПолучитьКлючЗаписи(КлючСтруктуры);
	Возврат РегистрыСведений.ЗапросНаОтсутствие.ОтклонитьЗаявку(КлючЗаписи,ПричинаОтказа);
КонецФункции

Функция ОтменитьЗаявку(КлючСтруктуры) Экспорт 
	КлючЗаписи = ПолучитьКлючЗаписи(КлючСтруктуры);
	Возврат РегистрыСведений.ЗапросНаОтсутствие.ОтменитьЗаявку(КлючЗаписи);
КонецФункции

Функция ОтправитьПисьмоПоЗаявке(Запись, НаДату = Неопределено) Экспорт	
	
	ТекСтрокаДаты = Формат(?(НаДату = Неопределено,ТекущаяДата(),НаДату),"ДФ=дд.ММ.гггг ЧЧ:мм:сс");		
	
	Если Запись.Статус = Перечисления.СтатусыЗаявок.Новый Тогда //отправка заявки на подпись
		Тема = "СУРВ: Новая заявка от "+ Запись.Пользователь;
		Текст = ТекСтрокаДаты + ": Сотрудник " + Запись.Пользователь + " разместил заявку Вам на подпись";
		Получатель = Запись.ПользовательПодписант;
	Иначе 													//отправка уведомления об одобрении/отказе
		Тема = "СУРВ: Получен ответ на заявку от " + Запись.ПользовательПодписант;
		Текст = ТекСтрокаДаты + ": Сотрудник-подписант " + Запись.ПользовательПодписант + " изменил статус вашей заявки на " + Запись.Статус;
		Получатель = Запись.Пользователь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Получатель.Email) Тогда 
		Попытка		
			ОтправитьПисьмоФоново(Получатель.Email,Тема,Текст);
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
			
КонецФункции

Функция ВернутьТекущийДоменПользователя() Экспорт 
	Возврат ПараметрыСеанса.ТекущийПользователь.Домен;
КонецФункции

Процедура ОбновитьДанныеОРодителяхПользователей() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка,
				   |	ЕСТЬNULL(Пользователи1.Ссылка,ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) НовыйРодитель1,
				   |	Пользователи.Родитель1 СтарыйРодитель1,
				   |	ЕСТЬNULL(Пользователи2.Ссылка,ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) НовыйРодитель2,
				   |	Пользователи.Родитель2 СтарыйРодитель2,
				   |	ЕСТЬNULL(Пользователи3.Ссылка,ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) НовыйРодитель3,
				   |	Пользователи.Родитель3 СтарыйРодитель3,
				   |	ЕСТЬNULL(Пользователи4.Ссылка,ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) НовыйРодитель4,
				   |	Пользователи.Родитель4 СтарыйРодитель4,
				   |	ЕСТЬNULL(Пользователи5.Ссылка,ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) НовыйРодитель5,
				   |	Пользователи.Родитель5 СтарыйРодитель5,
				   |	ЕСТЬNULL(Пользователи6.Ссылка,ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) НовыйРодитель6,
				   |	Пользователи.Родитель6 СтарыйРодитель6,
				   |	ЕСТЬNULL(Пользователи7.Ссылка,ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) НовыйРодитель7,
				   |	Пользователи.Родитель7 СтарыйРодитель7,
				   |	ЕСТЬNULL(Пользователи8.Ссылка,ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) НовыйРодитель8,
				   |	Пользователи.Родитель8 СтарыйРодитель8
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи1
	               |		ПО Пользователи.Родитель = Пользователи1.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи2
	               |		ПО Пользователи1.Родитель = Пользователи2.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи3
	               |		ПО Пользователи2.Родитель = Пользователи3.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи4
	               |		ПО Пользователи3.Родитель = Пользователи4.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи5
	               |		ПО Пользователи4.Родитель = Пользователи5.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи6
	               |		ПО Пользователи5.Родитель = Пользователи6.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи7
	               |		ПО Пользователи6.Родитель = Пользователи7.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи8
	               |		ПО Пользователи7.Родитель = Пользователи8.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Об = Неопределено;
		Для х = 1 По 8 Цикл 
			Если Выборка["НовыйРодитель"+СокрЛП(х)] <> Выборка["СтарыйРодитель"+СокрЛП(х)] Тогда 
				Об = Выборка.Ссылка.ПолучитьОбъект();	
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Об <> Неопределено Тогда 
			Об.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
